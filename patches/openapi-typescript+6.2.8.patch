diff --git a/node_modules/openapi-typescript/dist/transform/operation-object.js b/node_modules/openapi-typescript/dist/transform/operation-object.js
index 85fb657..c52796d 100644
--- a/node_modules/openapi-typescript/dist/transform/operation-object.js
+++ b/node_modules/openapi-typescript/dist/transform/operation-object.js
@@ -8,7 +8,7 @@ export default function transformOperationObject(operationObject, { path, ctx, w
     const output = wrapObject ? ["{"] : [];
     indentLv++;
     {
-        if (operationObject.parameters) {
+        // if (operationObject.parameters) {
             const parameterOutput = [];
             indentLv++;
             for (const paramIn of ["query", "header", "path", "cookie"]) {
@@ -43,6 +43,8 @@ export default function transformOperationObject(operationObject, { path, ctx, w
                     parameterOutput.push(indent(`${key}: {`, indentLv));
                     parameterOutput.push(...paramInternalOutput);
                     parameterOutput.push(indent(`};`, indentLv));
+                } else {
+                    parameterOutput.push(indent(`${paramIn}: unknown;`, indentLv));
                 }
             }
             indentLv--;
@@ -51,7 +53,7 @@ export default function transformOperationObject(operationObject, { path, ctx, w
                 output.push(parameterOutput.join("\n"));
                 output.push(indent("};", indentLv));
             }
-        }
+        // }
     }
     {
         if (operationObject.requestBody) {
@@ -73,12 +75,14 @@ export default function transformOperationObject(operationObject, { path, ctx, w
                 });
                 output.push(indent(`${key}: ${requestBody};`, indentLv));
             }
+        } else {
+            output.push(indent(`requestBody: never;`, indentLv));
         }
     }
     {
+        output.push(indent(`responses: {`, indentLv));
+        indentLv++;
         if (operationObject.responses) {
-            output.push(indent(`responses: {`, indentLv));
-            indentLv++;
             for (const [responseCode, responseObject] of getEntries(operationObject.responses, ctx.alphabetize, ctx.excludeDeprecated)) {
                 const key = escObjKey(responseCode);
                 const c = getSchemaObjectComment(responseObject, indentLv);
@@ -98,9 +102,9 @@ export default function transformOperationObject(operationObject, { path, ctx, w
                     output.push(indent(`${key}: ${responseType};`, indentLv));
                 }
             }
-            indentLv--;
-            output.push(indent(`};`, indentLv));
         }
+        indentLv--;
+        output.push(indent(`};`, indentLv));
     }
     indentLv--;
     if (wrapObject) {
